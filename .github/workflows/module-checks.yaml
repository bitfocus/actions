name: Companion Module Checks

on:
  workflow_call:
    inputs:
      repository-name:
        type: string
        description: 'The name of the repository to clone (if not set, uses the caller repository)'
        required: false
        default: ${{ github.repository }}
      upload-artifact:
        type: boolean
        description: 'Upload the package as an artifact'
        required: false
        default: false
    outputs:
      package-file:
        description: "Filename of the produced package"
        value: ${{ jobs.package-module.outputs.package-file }}

jobs:
  package-module:
    name: Package module
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      packages: read
      
    outputs:
      package-file: ${{ steps.package.outputs.filename }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository-name }}
          persist-credentials: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine nodejs version
        id: determine-nodejs
        shell: bash
        run: |
          NODE_VERSION=$(jq '.runtime.type' companion/manifest.json)
          echo "Node.js version: $NODE_VERSION"

          if [ "$NODE_VERSION" == "\"node18\"" ]; then
            echo "Using Node.js 18.x"
            echo "version=18.x" >> $GITHUB_OUTPUT
          elif [ "$NODE_VERSION" == "\"node22\"" ]; then
            echo "Using Node.js 22.x"
            echo "version=22.x" >> $GITHUB_OUTPUT
          fi
          
      - name: Use Node.js ${{ steps.determine-nodejs.outputs.version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.determine-nodejs.outputs.version }}
          
      - name: Enable corepack
        shell: bash
        run: |
          corepack enable

      - name: Collect info
        shell: bash
        run: |
          MODULE_NAME="${{ inputs.repository-name }}"
          # TODO - sanitise this value

          MANIFEST_ID=$(jq '.["id"]' companion/manifest.json)
          if [ ! "$MANIFEST_ID" == "\"${MODULE_NAME}\"" ]; then
            echo "Module manifest.json id does not match github repository name"
            exit 99
          fi

          if grep -q "companion-module-your-module-name" "companion/manifest.json"; then
            echo "Module manifest contains references to companion-module-your-module-name!"
            exit 99
          fi

          if ! jq -e '.products | arrays and length > 0' companion/manifest.json > /dev/null; then
            echo "Module manifest product list is either empty or does not exist"
            exit 99
          fi

      - name: Setup Github packages auth
        shell: bash
        run: |
          # TODO: support yarn3 with something like (needs a syntax check)
          # yarn config set npmRegistries.//npm.pkg.github.com.npmAuthToken $NPM_AUTH_TOKEN

          echo "//npm.pkg.github.com/:_authToken=${{ github.token }}" >> ~/.npmrc

      - name: Prepare module
        shell: bash
        run: |
          yarn install

          # yarn build would be better, but lacks the --if-present property
          npm run build --if-present

      - name: Package module
        id: package
        shell: bash
        run: |
          yarn companion-module-build

      - name: Upload artifact
        if: ${{ inputs.upload-artifact }}
        uses: actions/upload-artifact@v4
        with:
          path: "pkg.tgz"
